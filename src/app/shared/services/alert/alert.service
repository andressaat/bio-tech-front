
import { filter } from 'rxjs/operators';
import { Injectable } from '@angular/core';
import { Router, NavigationStart } from '@angular/router';
import { Subject, Observable } from 'rxjs';
import { Alert, AlertType } from '../../models';


@Injectable({
  providedIn: 'root'
})
export class AlertService {
  private subject = new Subject<Alert>();
  private keepAfterRouteChange = false;
  ANIMATE_ROTATE = 'rotate';
  ANIMATE_FADE = 'fade';
  ANIMATE_SCALE = 'scale';
  ANIMATE_FROM_TOP = 'fromTop';
  ANIMATE_FROM_RIGHT = 'fromRight';
  ANIMATE_FROM_BOTTOM = 'fromBottom';
  ANIMATE_FROM_LEFT = 'fromLeft';

  constructor(private router: Router) {
    router.events.subscribe(event => {
      if (event instanceof NavigationStart) {
        if (this.keepAfterRouteChange) {
          // only keep for a single route change
          this.keepAfterRouteChange = false;
        } else {
          // clear alert messages
          this.clear();
        }
      }
    });
  }

  getAlert(alertId?: string): Observable<any> {
    return this.subject.asObservable().pipe(filter((x: Alert) => x && x.alertId === alertId));
  }

  success(message: string, animate = 'fromTop'): void {
    this.alert(new Alert({ type: AlertType.Success, message, animate }));
  }

  error(message: string, animate = 'fromTop'): void {
    this.alert(new Alert({ type: AlertType.Error, message, animate }));
  }

  info(message: string, animate = 'fromTop'): void {
    this.alert(new Alert({ type: AlertType.Info, message, animate }));
  }

  warn(message: string, animate = 'fromTop'): void {
    this.alert(new Alert({ type: AlertType.Warning, message, animate }));
  }

  // main alert method
  alert(alert: Alert): void {
    alert.keepAfterRouteChange = false;
    this.keepAfterRouteChange = alert.keepAfterRouteChange;
    this.subject.next(alert);
  }

  clear(): void {
    // clear alerts
    this.subject.next();
  }
}
